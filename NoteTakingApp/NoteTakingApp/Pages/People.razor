@page "/people"
 

<PageTitle>Weather forecast</PageTitle>

@using DataLibrary
@using NoteTakingApp.Models
@using Microsoft.Extensions.Configuration

@inject IDataAccess _data
@inject IConfiguration _config



<h1>Welcome to your Note Taking App</h1>

@*List of Messages*@

<EditForm Model=@NoteForm OnSubmit=@FormSubmitted>
    <div class="container">
        <p>Message Form</p>
        <div class="box"></div>
    </div>

    <table>
        <tr>
            <td> <label>Title:</label></td>
            <td><InputText @bind-Value=NoteForm.Title /></td>
        </tr>

        <tr>
            <td> <label>Message:</label></td>
            <td><InputTextArea @bind-Value=NoteForm.Message></InputTextArea></td>
        </tr>

    </table>
    @* <input type="submit" value="Submit" class="btn btn-primary" />*@
    <button class="btn btn-primary" @onclick="@InsertNotes">Insert</button>


    <table>
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Message</th>
                <th>Options</th>
                <th></th>
            </tr>
        </thead>
        <tbody>

            @foreach (var n in notes)
            {
                <tr>

                    <td> <p>@n.Id</p></td>
                    <td> <p>@n.Title</p></td>
                    <td> <p>@n.Message</p></td>
                    <td>

                        <a href="@($"edit-note/{@n.Id}")" class="btn btn-danger m-1">Edit</a>
                        <a href="@($"delete-note/{@n.Id}")" class="btn btn-warning m-1">Delete2</a>

                    </td>
                    <td>

                        @* <a href="@($"edit-note/{@n.Id}")"
                            class="btn btn-danger m-1">Delete</a>*@
                    </td>
                </tr>
            }

        </tbody>
    </table>


</EditForm>



@code {
 
    List<NoteTaking>? notes;

    string Status = "Not submitted";
    NoteTaking NoteForm = new NoteTaking();


    private async Task FormSubmitted()
    {
        Status = "Form submitted";
        // Post data to the server, etc
        await OnInitializedAsync();

    }

    //note taking

    protected override async Task OnInitializedAsync()
    {
        string sql = "select * from test.NoteTaking";
        notes = await _data.LoadData<NoteTaking, dynamic>(sql, new { }, _config.GetConnectionString("default"));
    }


    private async Task InsertNotes()
    {
        string sql = "insert into test.NoteTaking (Title, Message) values (@Title, @Message);";
        await _data.SaveData(sql, new { Title = @NoteForm.Title, Message = NoteForm.Message }, _config.GetConnectionString("default"));
        await OnInitializedAsync();

    }

 
    private async Task DeleteNote(int Id)
    {
        string sql = "delete from Test.NoteTaking where Id=@Id";
        await _data.SaveData(sql, new { Id = @Id }, _config.GetConnectionString("default"));
        await OnInitializedAsync();

    }

    protected async Task Submit()
    {
        await DeleteNote(NoteForm.Id);
    }

}


